#!/usr/bin/env bash

## Peform setup
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
. ${SCRIPT_DIR}/db_backup_setup

## Process params
TABLES_TO_SKIP=()

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -dd|--dumps-dir)
      DB_BACKUP_DUMPS_DIR=$2
      shift 2
      ;;
    -dd=*|--dumps-dir=*)
      DB_BACKUP_DUMPS_DIR="${1#*=}"
      shift 1
      ;;

    -rf|--remote-file)
      REMOTE_FILE=$2
      shift 2
      ;;
    -rf=*|--remote-file=*)
      REMOTE_FILE="${1#*=}"
      shift 1
      ;;

    --url|--signed-url)
      REMOTE_SIGNED_URL=$2
      shift 2
      ;;
    --url=*|--signed-url=*)
      REMOTE_SIGNED_URL="${1#*=}"
      shift 1
      ;;

    -lf|--local-file)
      LOCAL_FILE=$2
      shift 2
      ;;
    -lf=*|--local-file=*)
      LOCAL_FILE="${1#*=}"
      shift 1
      ;;

    --skip-downloading)
      SKIP_DOWNLOADING=true
      shift 1
    ;;

    --create-database)
      CREATE_DATABASE=$2
      shift 2
      ;;
    --create-database=*)
      CREATE_DATABASE="${1#*=}"
      shift 1
      ;;

    -db|--database)
      DATABASE_URL=$2
      shift 2
      ;;
    -db=*|--database=*)
      DATABASE_URL="${1#*=}"
      shift 1
      ;;

    -skt|--skip-table)
      TABLES_TO_SKIP+=($2)
      shift 2
      ;;
    -skm|--skip-materialized-views)
      SKIP_MATERIALIZED_VIEWS=true
      shift 1
      ;;
    -skf|--skip-foreign-tables)
      SKIP_FOREIGN_TABLES=true
      shift 1
      ;;
    -skv|--skip-versions)
      TABLES_TO_SKIP+=('public.versions')
      shift 1
      ;;
    *)
      shift
      ;;
  esac
done

if [[ -z "$CREATE_DATABASE" ]]; then
  CREATE_DATABASE=true
fi

if [[ -z "$DB_BACKUP_DUMPS_DIR" ]]; then
  DB_BACKUP_DUMPS_DIR=$TMP_DIR/dumps
fi

mkdir -p $DB_BACKUP_DUMPS_DIR

if [[ -n "$LOCAL_FILE" && -z "${REMOTE_FILE}" && -z "$REMOTE_SIGNED_URL" ]]; then
  SKIP_DOWNLOADING=true
fi

if [[ "$SKIP_DOWNLOADING" != "true" ]]; then
  LOCAL_FILE="$(
    db_backup_download \
      --dd "$DB_BACKUP_DUMPS_DIR" \
      --url "$REMOTE_SIGNED_URL" \
      -rf "$REMOTE_FILE" \
      -lf "$LOCAL_FILE" \
  )"
fi

if [[ ! -f "$LOCAL_FILE" ]]; then
  echo "File $LOCAL_FILE not found"
  exit 2
fi

if [[ -n "${TABLES_TO_SKIP[*]}" || "$SKIP_MATERIALIZED_VIEWS" == "true" || "$SKIP_FOREIGN_TABLES" == "true" ]]; then
  LIST_FILE=$LOCAL_FILE.lst

  pg_restore --list "$LOCAL_FILE" > $LIST_FILE

  for TABLE_NAME in "${TABLES_TO_SKIP[@]}"; do
    echo "Skipping table ${TABLE_NAME}"
    sed --in-place -E "/${TABLE_NAME/./\\s+}/d" $LIST_FILE
    sed --in-place -E "/${TABLE_NAME/./\\s+TABLE\\s}/d" $LIST_FILE
  done

  if [[ "$SKIP_MATERIALIZED_VIEWS" == "true" ]]; then
    echo "Skipping materialized views"
    sed --in-place -E "/MATERIALIZED\\s+VIEW/d" $LIST_FILE
  fi

  if [[ "$SKIP_FOREIGN_TABLES" == "true" ]]; then
    echo "Skipping foreign tables"
    sed --in-place -E "/FOREIGN\\sDATA\\sWRAPPER/d" $LIST_FILE
    sed --in-place -E "/FOREIGN\\s+TABLE/d" $LIST_FILE
  fi

  # TABLES_TO_RESTORE=$(echo "$ALL_TABLES" \
  #   | grep -v -E "$(IFS=$'\n' ; echo "${TABLES_TO_SKIP[*]}") | tr ';' '|' | sed 's/\./\\./'"
  # )
  TABLES_RESTORE_OPTIONS="--use-list=$LIST_FILE"
else
  TABLES_RESTORE_OPTIONS=""
fi

if [[ "$CREATE_DATABASE" == "true" ]]; then
  SUPERUSER_DATABASE_URL=$(echo $DATABASE_URL | sed -E 's/\/\w+?$/\/postgres/')
  CREATED_DB_NAME=$(basename $LOCAL_FILE | cut -d. -f1)__at__$(date +'%Y%m%d_%H%M%S')

  DATABASE_URL=$(echo $DATABASE_URL | sed -E "s/\\/\\w+?$/\\/${CREATED_DB_NAME}/")

  psql "$SUPERUSER_DATABASE_URL" <<-SQL
    CREATE DATABASE ${CREATED_DB_NAME};
SQL
  echo "Created database ${CREATED_DB_NAME}"
fi

pg_restore --verbose --clean --no-acl --no-owner \
  -d "$DATABASE_URL" \
  $TABLES_RESTORE_OPTIONS \
  < "$LOCAL_FILE" \
  || echo "There were some problems during restore"

# pg_restore --verbose --no-acl --no-owner \
#   --data-only \
#   -d "$DATABASE_URL" \
#   $TABLES_RESTORE_OPTIONS \
#   < "$LOCAL_FILE"

if [[ ! -z "$CREATED_DB_NAME" ]]; then
  echo "Restored $CREATED_DB_NAME"
else
  echo "Restored to DATABASE_URL"
fi