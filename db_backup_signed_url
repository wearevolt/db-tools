#!/usr/bin/env bash

set -e

trap 'on_error $LINENO' ERR

on_error() {
  LINE=$1
  printf "Error at LINE NUMBER: $LINE"
}

# Configuration
# following configuration parameters required:
# DB_BACKUP_AWS_ACCESS_KEY_ID=
# DB_BACKUP_AWS_SECRET_ACCESS_KEY=
# DB_BACKUP_AWS_DEFAULT_REGION=
# DB_BACKUP_TARGET_BUCKET=
# DB_BACKUP_ROOT=
# DB_BACKUP_BASE_NAME=

BASE_DIR="$( git rev-parse --show-toplevel 2>/dev/null || echo '')"

if [[ -z $BASE_DIR ]]; then
  TMP_DIR=$BASE_DIR/tmp
else
  TMP_DIR=/tmp
fi

if [[ -z "$RAILS_ENV" ]]; then
  RAILS_ENV=development
fi

if [ "$RAILS_ENV" != "production" ]; then
  if [[ -f ${BASE_DIR}/.env ]]; then
    . ${BASE_DIR}/.env
  fi

  if [[ -f ${BASE_DIR}/.env.${RAILS_ENV} ]]; then
    . ${BASE_DIR}/.env.${RAILS_ENV}
  fi

  if [[ -f ${BASE_DIR}/.env.db_tools ]]; then
    . ${BASE_DIR}/.env.db_tools
  fi
fi

export AWS_ACCESS_KEY_ID=${DB_BACKUP_AWS_ACCESS_KEY_ID}
export AWS_SECRET_ACCESS_KEY=${DB_BACKUP_AWS_SECRET_ACCESS_KEY}
export AWS_DEFAULT_REGION=${DB_BACKUP_AWS_DEFAULT_REGION}

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -rf|---remote-file)
      REMOTE_FILE=$2
      shift 2
      ;;
    -rf=*|---remote-file=*)
      REMOTE_FILE="${1#*=}"
      shift 1
      ;;
    *)
      shift
      ;;
  esac
done

if [[ -z "$REMOTE_FILE" ]]; then
  REMOTE_FILE=$(db_ls_backups | grep -v next | tail -n 1 | awk '{ print $1; }')
fi

aws s3 presign \
  s3://${DB_BACKUP_TARGET_BUCKET}/${REMOTE_FILE} \
  --expires-in 300
