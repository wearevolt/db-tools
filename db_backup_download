#!/bin/bash

## Peform setup
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
. ${SCRIPT_DIR}/db_backup_setup


## Process params
while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -dd|--dumps-dir)
      DB_BACKUP_DUMPS_DIR=$2
      shift 2
      ;;
    -dd=*|--dumps-dir=*)
      DB_BACKUP_DUMPS_DIR="${1#*=}"
      shift 1
      ;;

    -rf|--remote-file)
      REMOTE_FILE=$2
      shift 2
      ;;
    -rf=*|--remote-file=*)
      REMOTE_FILE="${1#*=}"
      shift 1
      ;;

    --url|--signed-url)
      REMOTE_SIGNED_URL=$2
      shift 2
      ;;
    --url=*|--signed-url=*)
      REMOTE_SIGNED_URL="${1#*=}"
      shift 1
      ;;

    -lf|--local-file)
      LOCAL_FILE=$2
      shift 2
      ;;
    -lf=*|--local-file=*)
      LOCAL_FILE="${1#*=}"
      shift 1
      ;;

    *)
      shift 1
      ;;
  esac
done

if [[ ! -z "$LOCAL_FILE" ]]; then
  DB_BACKUP_DUMPS_DIR=$(dirname $LOCAL_FILE)
fi

if [[ -z "$DB_BACKUP_DUMPS_DIR" ]]; then
  DB_BACKUP_DUMPS_DIR=$TMP_DIR/dumps
fi


if [[ ( -z "$REMOTE_FILE" ) && ( ! -z "$REMOTE_SIGNED_URL" ) ]]; then
  echo "Either --remote-file or --signed-url param required" >&2
  exit 1
fi

if [[ -z "$LOCAL_FILE" ]]; then
  if [[ ! -z "$REMOTE_SIGNED_URL" ]]; then
    LOCAL_FILE=$DB_BACKUP_DUMPS_DIR/$(basename $REMOTE_SIGNED_URL | cut -d? -f1)
  else
    LOCAL_FILE=$DB_BACKUP_DUMPS_DIR/$(basename $REMOTE_FILE)
  fi
fi

mkdir -p $DB_BACKUP_DUMPS_DIR

if [[ -z $REMOTE_SIGNED_URL ]]; then
  S3_FILE_PATH=s3://$DB_BACKUP_TARGET_BUCKET/$REMOTE_FILE

  echo aws s3 cp "$S3_FILE_PATH" "$LOCAL_FILE" --only-show-errors >&2
  aws s3 cp "$S3_FILE_PATH" "$LOCAL_FILE" --only-show-errors
else
  wget "$REMOTE_SIGNED_URL" -O "$LOCAL_FILE"
fi

echo "$LOCAL_FILE"