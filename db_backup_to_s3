#!/usr/bin/env bash

set -e

trap 'on_error $LINENO' ERR

on_error() {
  LINE=$1
  printf "Error at LINE NUMBER: $LINE"
}

# Configuration
# following configuration parameters required:
# DB_BACKUP_AWS_ACCESS_KEY_ID=
# DB_BACKUP_AWS_SECRET_ACCESS_KEY=
# DB_BACKUP_AWS_DEFAULT_REGION=
# DB_BACKUP_TARGET_BUCKET=
# DB_BACKUP_ROOT=
# DB_BACKUP_BASE_NAME=

BASE_DIR="$( git rev-parse --show-toplevel 2>/dev/null || echo '')"

if [[ -z $BASE_DIR ]]; then
  TMP_DIR=$BASE_DIR/tmp
else
  TMP_DIR=/tmp
fi

if [[ -z "$RAILS_ENV" ]]; then
  RAILS_ENV=development
fi

if [ "$RAILS_ENV" != "production" ]; then
  if [[ -f ${BASE_DIR}/.env ]]; then
    . ${BASE_DIR}/.env
  fi

  if [[ -f ${BASE_DIR}/.env.${RAILS_ENV} ]]; then
    . ${BASE_DIR}/.env.${RAILS_ENV}
  fi

  if [[ -f ${BASE_DIR}/.env.db_tools ]]; then
    . ${BASE_DIR}/.env.db_tools
  fi
fi

export AWS_ACCESS_KEY_ID=${DB_BACKUP_AWS_ACCESS_KEY_ID}
export AWS_SECRET_ACCESS_KEY=${DB_BACKUP_AWS_SECRET_ACCESS_KEY}
export AWS_DEFAULT_REGION=${DB_BACKUP_AWS_DEFAULT_REGION}


while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -bn|--base-name)
      BACKUP_BASE_NAME=$2
      shift 2
      ;;
    -bn=*|--base-name=*)
      BACKUP_BASE_NAME="${1#*=}"
      shift 1
      ;;

    -npx|--name-prefix)
      BACKUP_FILE_PREFIX=$2
      shift 2
      ;;
    -npx=*|--name-prefix=*)
      BACKUP_FILE_PREFIX="${1#*=}"
      shift 1
      ;;

    -nsx|--name-suffix)
      BACKUP_FILE_SUFFIX=$2
      shift 2
      ;;
    -nsx=*|--name-suffix=*)
      BACKUP_FILE_SUFFIX="${1#*=}"
      shift 1
      ;;

    -db|--database-url)
      DATABASE_URL=$2
      shift 2
      ;;
    -db=*|--database-url=*)
      DATABASE_URL="${1#*=}"
      shift 1
      ;;

    --backup-root)
      BACKUP_ROOT=$2
      shift 2
      ;;
    --backup-root=*)
      BACKUP_ROOT="${1#*=}"
      shift 1
      ;;

    --backup-dir)
      BACKUP_DIR=$2
      shift 2
      ;;
    --backup-dir=*)
      BACKUP_DIR="${1#*=}"
      shift 1
      ;;

    --backup-file-name)
      BACKUP_FILE_NAME=$2
      shift 2
      ;;
    --backup-file-name=*)
      BACKUP_FILE_NAME="${1#*=}"
      shift 1
      ;;

    --backup-remote-file-path)
      REMOTE_FILE_PATH=$2
      shift 2
      ;;
    --backup-remote-file-path=*)
      REMOTE_FILE_PATH="${1#*=}"
      shift 1
      ;;
    *)
      shift
      ;;
  esac
done

if [[ -z "$BACKUP_BASE_NAME" ]]; then
  BACKUP_BASE_NAME=$DB_BACKUP_BASE_NAME
fi

if [[ -z "$BACKUP_ROOT" ]]; then
  BACKUP_ROOT=${DB_BACKUP_ROOT}
fi

if [[ -z "$BACKUP_DIR" ]]; then
  BACKUP_DIR=$(date +"%Y/%Y-%m/%Y-%m-%d" --utc)
fi

if [[ -z "$BACKUP_FILE_NAME" ]]; then
  BACKUP_FILE_NAME=$(
    date +"${BACKUP_FILE_PREFIX}${BACKUP_BASE_NAME}_%Y_%m_%d__%H_%M_%S${BACKUP_FILE_SUFFIX}.dump" --utc
  )
fi

if [[ -z "$REMOTE_FILE_PATH" ]]; then
  REMOTE_FILE_PATH="${BACKUP_ROOT}/${BACKUP_DIR}/${BACKUP_FILE_NAME}"
fi

S3_FILE_PATH="s3://${DB_BACKUP_TARGET_BUCKET}/${REMOTE_FILE_PATH}"

aws configure set default.s3.multipart_chunksize 50MB

pg_dump --format=custom -Z 5 -d "$DATABASE_URL" | aws s3 cp - "$S3_FILE_PATH"

echo "Backed successfully up to: ${REMOTE_FILE_PATH}"